#!/n/local/stage/perlbrew/perlbrew-0.43/perls/perl-5.16.0/bin/perl
# Originally obtained from Marco
# Modified by ejr to support BLAST+: 20130731
#
use strict;
use warnings;
use Getopt::Long;
# Eric removed pod2usage().  Someone may wish to add it back eventually
#use Pod::Usage;
use File::Basename;
use File::Path qw(make_path remove_tree);
use POSIX qw/strftime/;
require File::Temp;
use File::Temp ();

use Bio::SeqIO;

our $blast = '/n/local/bin/blastall';

our ($man,$help,$debug,@prog_args);
our ($max_hits, $outfmt,$cpu,$queue,$pe,$dryrun);
our ($blastplus,$max,$out_file,$progName,$db,$fasta_in,$DESTDIR,@extra);
our $TEMPDIR;


MAIN:{
  init();
  $TEMPDIR = File::Temp->newdir( DIR => $DESTDIR );
  my @blasts = batchBlast();
  if ($outfmt eq 'parse') {
    blastReport(@blasts);
  } elsif ($outfmt eq 'table') {
    concatenateBlasts(@blasts);
  }
  remove_tree($TEMPDIR->dirname);
  unlink('error.log');
  exit 1;
}

sub blastReport {
  my %jobs;
  my $rep_dir = "$TEMPDIR/report";
  make_path($rep_dir);
  
  my $exec = "$rep_dir/parseBlast.pl"; 
  open my $p, ">$exec";
  print $p <DATA>;
  close $p;
  
  my @reps;
  for my $blastR (@_){
    my $f = fileparse($blastR,'.txt');
    push @reps,"$rep_dir/$f.rep";
    $jobs{$f} = "perl $ENV{PWD}/$exec $blastR $reps[$#reps]"
  }
  spinQsub(\%jobs,"report",1);

  open my $rep, ">$DESTDIR/blastReport.tab";
  print $rep (join("\t","query_name","target_name","raw_score","significance"),"\n");
  for (@reps){
      next unless -e $_;
      open my ($in), $_;
      print $rep (<$in>);
      close $in;
    }
  close $rep;
}

sub concatenateBlasts {
  open my $table, ">$DESTDIR/blastTable.txt";
  print $table (join("\t","query_name",
                           "target_name",
                           "identity",
                           "length",
                           "mismatch",
                           "gaps",
                           "query_start",
                           "query_end",
                           "subject_start",
                           "subject_end",
                           "evalue",
                           "bit_score",
                           ),"\n");
  for my $blastR (@_){
   open (my $blastfile, "$ENV{PWD}/$blastR") or die "can't open file: $!\n";
     while (my $line = <$blastfile>) {
        print $table $line;
     }
   close $blastfile;

  }
  close $table;

}

sub batchBlast {
  
  my $in =  Bio::SeqIO->new(-file =>$fasta_in);
  
  my (%jobs,@res,$out,$i,$k);
  while(my $seq = $in->next_seq){ 
    if (!defined $i || $i == $max){
      $i = 0 if defined $i && $i == $max;
      last if scalar @res == 10 && $debug;
      
      my $resdir ="$TEMPDIR/blast_res"; 
      make_path($resdir);
      push @res,"$resdir/blast_j".++$k.".txt";
      
      my $fh = File::Temp->new(DIR=>$TEMPDIR,UNLINK => 0);
      my $fname = $fh->filename;
      
      # Set $blast_com based on which blast program is being used.
      # supports blast+ and ncbi_blast
      my $blast_com;
      unless ($blastplus) {
        $blast_com = join(" ",
			   $blast,
			   "-a $cpu",
			   "-m 8",
			   "-p $progName",
			   "-d $db",
               "-v $max_hits",
               "-b $max_hits",
			   "-i \"$fname\"",
			   @extra,
			   " -o $res[$#res]"
			  );
      } else {
        $blast_com = join(" ",
			   $progName,
			   "-num_threads $cpu",
			   "-outfmt 6",
			   "-db $db",
			   "-query $fname",
               "-max_target_seqs $max_hits",
			   @extra,
			   "-out $res[$#res]"
               );
      }
      
      $out = Bio::SeqIO->new(-fh     => $fh,
			     -format => 'fasta');
      $jobs{"j$k"} = "time $blast_com";
    }
    $i++;
    $out->write_seq($seq) 
  }
  spinQsub(\%jobs,"blast");
  return(@res);
}

sub spinQsub {
  my %jobs = %{shift()};
  my $type = shift();
  my $reqCPU = shift;
  
  $type ||= '';
  
  $cpu = $reqCPU if $reqCPU;
  
  my $sge_out = "$DESTDIR/SGE_out";
  make_path($sge_out) unless $dryrun;
  
  my (@job_ids,$i);
  for my $exp (keys %jobs){
    
    my $com = "qsub";
    $com   .= " -l mem_free=2G";
    $com   .= " -j y -o \"$sge_out\"";
    $com   .= " -pe $pe $cpu";
    $com   .= " -q $queue";
    $com   .= " -N ${type}_$exp";
    $com   .= " -V";
    $com   .= " -cwd";
    $com   .= " -terse";
    $com   .= " -b y";
    $com   .= " '$jobs{$exp}'";
    
    print "$com\n";
    print "============>>>\n";
    
    next if $dryrun;
    
    open my $qsub,"-|",$com;
    while (<$qsub>){chomp;push @job_ids,$_};
    close $qsub;
  }
  return if $dryrun;
  
  ### Create a qrsh dependent on the submited job waiting to join
  ### Prevents from returning before the alignments are done
  print "Waiting on jobs to finish\n";
  my $end = '/opt/gridengine/bin/linux-x64/qrsh';
  $end   .= ' -now y';
  $end   .= ' -hold_jid '.join ",",@job_ids;
  $end   .= " 'echo Done!'";
  system $end;
}

sub init {
  my $filename = basename($0);
  @prog_args = ($filename,@ARGV);
  if ($debug) {
      print("Running as:\n",
        join(" ",@prog_args),"\n",
	    ">>>>>>\n\n" );
    }

  GetOptions('debug'                 => \$debug,
	     'help|?'                => \$help,
	     'man'                   => \$man,
	     
	     'fasta=s'               => \$fasta_in,
	     'db=s'                  => \$db,
	     'program=s'             => \$progName,
	     'n=i'                   => \$max,
	     'destdir=s'             => \$DESTDIR,
	     'out=s'                 => \$out_file,
         'blastplus'             => \$blastplus,
         'outfmt=s'              => \$outfmt,
         'max_hits=i'             => \$max_hits,

	     'cpu=i'                 => \$cpu,
	     'queue=s'               => \$queue,
	     'pe=s'                  => \$pe,
	     'dryrun'                => \$dryrun
	    ) ;
#or pod2usage(1);

# This is going to exit if -help -? or no fasta_in
# there is currently no pod documentation and so this is not very helpful
#  if ($help ||!$fasta_in){
#    pod2usage(-exitstatus => 0, -verbose => 2);
#  }elsif ($man){
#    pod2usage(-exitstatus => 0, -verbose => 0);
#  }

# Eric's replacement usage statement
if ($help ||!$fasta_in ||!$db){
die ("
Program: sgeBlast (Submit BLAST cluster)
Version: 2013-07-31 

Usage:  sgeBlast [options]

Description:
        Run BLAST on SGE cluster.  Split into n sequences per job. 
        Configured for SIMR lepus cluster.

Mandatory Options:
        -fasta file   Filename of input FASTA formatted file
        -db file      Name of formatted BLAST database.  
                      db must be in either BLASTDB directory or
                      full path must be specified.

Output Options:
        -outfmt       Output format: blastfull, blasttable or minimal.[minimal]
                        table = tabular format (blastall -m 8, blast+ -outfmt 6)
                        parse = minimal table (query, subject, score, evalue)
        -max_hits     Maximum number of hits to return per query.
                

Additional Options:
        -program prog Specify blastp, tblastn, blastn, tblastx [blastp]
        -blastplus    Use BLAST+ instead of ncbi-blast/blastall
        -n n          Number of sequences per job.[5000]
        -destdir dir  Alternate destination directory
        -out file     Alternate output file name for parsed output    
        -help         Print this usage statement

Advanced Options:
        -cpu n        Specify number of CPUs per job [8]
        -queue string Specify submission queue [all.q]
        -pe string    Specify pe option [by_node]
        -extra string Additional BLAST parameters
        -debug        Enable debugging output

");
}

  $max      ||= $debug?100:5000;
  $progName ||= 'blastp';
  $out_file ||= 'sgeBlast.res';
  $outfmt   ||= 'parse';
  $max_hits ||= '1';

  $cpu      ||= 8;
  $queue    ||= 'all.q';
  $pe       ||= 'by_node';
  @extra = scalar @ARGV == 0?'-F "m S"':@ARGV;

  
  $DESTDIR ||= strftime('sgeBlast_%Y-%m-%d_%H_%M_%S',localtime);
  make_path($DESTDIR) unless (-e $DESTDIR && -d $DESTDIR);#|| $dryrun;
  
  print STDERR "##########RUNNING IN DEBUGING MODE##########\n" if $debug;
}

__DATA__
use strict;
use warnings;
use File::Basename;
use Bio::SearchIO;

MAIN:{
  my $blastR = shift;
  my $repf = shift;
  open OUT, ">$repf";
  my $parser = Bio::SearchIO->new(-file   => $blastR,
				  -format => 'blasttable',
				  -best   =>  1
				 );
  while( my $result = $parser->next_result ) {
    while( my $hit = $result->next_hit()){
      next unless $hit->rank() == 1;
      print OUT (join("\t",$result->query_name,$hit->name,$hit->raw_score,$hit->significance),"\n");
    }
  }
}

__END__

sgeBlast --fa ../../allframes.fa --db ../myProteins.db --dest temp --dryrun

sgeBlast --fa ../../allframes.fa --db ../myProteins.db --dest first_run --  "-F \"m S\" -f 999 -M BLOSUM80 -G 9 -E 2 -e 1e-5"

sgeBlast --fa allframes_after1.fa --db ../myProteins.db --dest second_run --  "-F \"m S\" -f 99 -M BLOSUM62 -e 1e-1"

sgeBlast --fa allframes.fa --db ../myProteins.db --dest third_run --  "-F \"m S\" -f 99 -M BLOSUM62 -e 1e-1"
